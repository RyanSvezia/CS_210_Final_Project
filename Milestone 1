#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <unordered_map>
#include <list>
#include <algorithm>
using namespace std;

struct CityKey {
    string countryCode;
    string cityName;

    bool operator==(const CityKey& other) const {
        return countryCode == other.countryCode && cityName == other.cityName;
    }
};

struct CityKeyHash {
    size_t operator()(const CityKey& key) const {
        return hash<string>()(key.countryCode + "_" + key.cityName);
    }
};

class LRUCache {
private:
    size_t maxSize;
    list<pair<CityKey, double>> cacheList;
    unordered_map<CityKey, list<pair<CityKey, double>>::iterator, CityKeyHash> cacheMap;

public:
    LRUCache(size_t size) : maxSize(size) {}

    bool get(const CityKey& key, double& population) {
        auto it = cacheMap.find(key);
        if (it != cacheMap.end()) {
            cacheList.splice(cacheList.begin(), cacheList, it->second);
            population = it->second->second;
            return true;
        }
        return false;
    }

    void put(const CityKey& key, double population) {
        auto it = cacheMap.find(key);
        if (it != cacheMap.end()) {
            it->second->second = population;
            cacheList.splice(cacheList.begin(), cacheList, it->second);
        } else {
            if (cacheList.size() == maxSize) {
                auto last = cacheList.back();
                cacheMap.erase(last.first);
                cacheList.pop_back();
            }
            cacheList.emplace_front(key, population);
            cacheMap[key] = cacheList.begin();
        }
    }

    void printCache() const {
        cout << "\nCache contents:\n";
        for (const auto& entry : cacheList) {
            cout << entry.first.countryCode << ", " << entry.first.cityName << " => " << entry.second << "\n";
        }
    }
};

double searchPopulationInCSV(const string& filename, const CityKey& key) {
    ifstream file(filename);
    string line;
    getline(file, line); 

    while (getline(file, line)) {
        stringstream ss(line);
        string countryCode, cityName, populationStr;

        getline(ss, countryCode, ',');
        getline(ss, cityName, ',');
        getline(ss, populationStr, ',');

        if (countryCode == key.countryCode && cityName == key.cityName) {
            return stod(populationStr);
        }
    }
    return -1; 
}

int main() {
    const string filename = "world_cities.csv";
    LRUCache cache(10);

    while (true) {
        string countryCode, cityName;
        cout << "\nEnter country code (or 'exit'): ";
        getline(cin, countryCode);
        if (countryCode == "exit") break;

        cout << "Enter city name: ";
        getline(cin, cityName);

        CityKey key{countryCode, cityName};
        double population;

        if (cache.get(key, population)) {
            cout << "Cache hit! Population: " << population << "\n";
        } else {
            population = searchPopulationInCSV(filename, key);
            if (population >= 0) {
                cout << "CSV Lookup. Population: " << population << "\n";
                cache.put(key, population);
            } else {
                cout << "City not found.\n";
            }
        }

        cache.printCache();
    }

    return 0;
}
