class ICache {
    public:
        virtual bool get(const std::string& countryCode, const std::string& cityName, double& population) = 0;
        virtual void put(const std::string& countryCode, const std::string& cityName, double population) = 0;
        virtual void printCache() const = 0;
        virtual ~ICache() {}
    };
class FIFOCache : public ICache {
    size_t maxSize;
    queue<pair<string, string>> order;
    unordered_map<string, double> data;

public:
    FIFOCache(size_t size) : maxSize(size) {}

    bool get(const string& cc, const string& cn, double& population) override {
        string key = cc + "_" + cn;
        auto it = data.find(key);
        if (it != data.end()) {
            population = it->second;
            return true;
        }
        return false;
    }

    void put(const string& cc, const string& cn, double population) override {
        string key = cc + "_" + cn;
        if (data.find(key) == data.end()) {
            if (data.size() >= maxSize) {
                auto oldest = order.front();
                order.pop();
                data.erase(oldest.first + "_" + oldest.second);
            }
            order.push({cc, cn});
        }
        data[key] = population;
    }

    void printCache() const override {
        cout << "FIFO Cache:\n";
        for (const auto& pair : data) {
            cout << pair.first << " -> " << pair.second << "\n";
        }
    }
};
